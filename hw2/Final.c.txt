/****************************************************************************/
/***        Include files                                                 ***/
/****************************************************************************/
#include "Final.h"

/****************************************************************************/
/***        Local Variables                                               ***/
/****************************************************************************/
PRIVATE void *s_pvMac;
PRIVATE MAC_Pib_s *s_psMacPib;
PRIVATE tsNodeData sNodeData;
PRIVATE uint16 u16HelloInt;
PRIVATE uint16 u16DelayedChk;

uint8 u8LastLQI = 0;
uint16 u16Temperature = 0;
uint16 u16Humidity = 0;
/****************************************************************************/
/***        Local Functions                                               ***/
/****************************************************************************/
// for normal usage
PUBLIC void AppColdStart(void)
{
	InitSystem();

	vStartActiveScan();

	while (1)
		vProcessEventQueues();
}
PUBLIC void AppWarmStart(void)
{
	AppColdStart();
}
PRIVATE void InitSystem(void)
{
	int i;

	u32AHI_Init();
	u32AppQApiInit(NULL,NULL,NULL);
	led_init();
	btn_init();
	led_on(LED0);
	led_on(LED1);

	/* Initialize node state */
	sNodeData.eState = E_STATE_IDLE;
	sNodeData.u16NbrChild = 0;

	for(i=0;i<MAX_NODE;i++) {
		sNodeData.uNextHop[i] = BROADCAST_ADR;
		sNodeData.u8NbrSense[i] = FALSE;
	}

	for(i=0;i<100;i++) {
		clrDelayedData(&(sNodeData.sDelayedData[i]));
	}

	sNodeData.u8TxPacketSeqNb = 0;
	sNodeData.u8RxPacketSeqNb = 0;
	sNodeData.u16Address = COORDINATOR_ADR;
	sNodeData.u16ParentAddress = COORDINATOR_ADR;

	/* Set up the MAC handles. Must be called AFTER u32AppQApiInit() */
	s_pvMac = pvAppApiGetMacHandle();
	s_psMacPib = MAC_psPibGetHandle(s_pvMac);

	/* Set Pan ID and short address in PIB (also sets match registers in hardware) */
	MAC_vPibSetPanId(s_pvMac, PAN_ID);

	/* Enable Promiscuous Mode*/
	MAC_vPibSetPromiscuousMode(s_pvMac, TRUE, FALSE);

	/* Enable receiver to be on when idle */
	MAC_vPibSetRxOnWhenIdle(s_pvMac, TRUE, FALSE);

	/* Allow nodes to associate */
	s_psMacPib->bAssociationPermit = 1;

	/*vAHI_UartEnable(PC_UARTPORT);
	vAHI_UartReset(PC_UARTPORT, TRUE, TRUE);
	vAHI_UartReset(PC_UARTPORT, FALSE, FALSE);
	vAHI_UartSetClockDivisor(PC_UARTPORT, PC_UARTBAUDRATE);
	vAHI_UartSetControl(PC_UARTPORT, E_AHI_UART_EVEN_PARITY, E_AHI_UART_PARITY_DISABLE, E_AHI_UART_WORD_LEN_8, E_AHI_UART_1_STOP_BIT, E_AHI_UART_RTS_LOW);
	vAHI_UartSetInterrupt(PC_UARTPORT, FALSE, FALSE, FALSE, TRUE, E_AHI_UART_FIFO_LEVEL_1);
	vAHI_Uart0RegisterCallback((void*)vProcessIncomingHwEventDetail);*/

	vSerial_Init();
}

// for applicaiton queue usage
PRIVATE void vProcessEventQueues(void)
{
	MAC_MlmeDcfmInd_s *psMlmeInd;
	MAC_McpsDcfmInd_s *psMcpsInd;
	AppQApiHwInd_s    *psAHI_Ind;

	/* Check for anything on the MCPS upward queue */
	do
	{
		psMcpsInd = psAppQApiReadMcpsInd();
		if (psMcpsInd != NULL)
		{
			vProcessIncomingMcps(psMcpsInd);
			vAppQApiReturnMcpsIndBuffer(psMcpsInd);
		}
	} while (psMcpsInd != NULL);

	/* Check for anything on the MLME upward queue */
	do
	{
		psMlmeInd = psAppQApiReadMlmeInd();
		if (psMlmeInd != NULL)
		{
			vProcessIncomingMlme(psMlmeInd);
			vAppQApiReturnMlmeIndBuffer(psMlmeInd);
		}
	} while (psMlmeInd != NULL);

	/* Check for anything on the AHI upward queue */
	do
	{
		psAHI_Ind = psAppQApiReadHwInd();
		if (psAHI_Ind != NULL)
		{
			vProcessIncomingHwEvent(psAHI_Ind);
			vAppQApiReturnHwIndBuffer(psAHI_Ind);
		}
	} while (psAHI_Ind != NULL);
}
PRIVATE void vProcessIncomingHwEvent(AppQApiHwInd_s *psAHI_Ind) {
	vProcessIncomingHwEventDetail(psAHI_Ind->u32DeviceId, psAHI_Ind->u32ItemBitmap);
}
PRIVATE void vProcessIncomingHwEventDetail(uint32 u32DeviceId, uint32 u32ItemBitmap)
{
	char tmp_str[100];
	/*uint8 u8InterruptStatus;
	uint8 u8RcvChar = 0x00;

	static char cmdbuffer[100];
	static int cmdbuffer_index;

	static char achar[4];
	achar[1]='\0';
	achar[2]='\n';
	achar[3]='\0';*/

	switch (u32DeviceId)
	{
	case E_AHI_DEVICE_SYSCTRL:
		if (btn_pressed(BUTTON0)) {
			genPACKET(tmp_str,sNodeData.u16Address,COORDINATOR_ADR,"PACKET_TO_COORDINATOR");
			vProcessor(tmp_str);
		}
		else if (btn_pressed(BUTTON1)) {
			genNOWADDR(tmp_str);
			vUartPrint(PC_UARTPORT,tmp_str);
			genDUMPNBR_R(tmp_str,sNodeData.u16Address,COORDINATOR_ADR);
			vUartPrint(PC_UARTPORT,tmp_str);
			genDUMPROUTE_R(tmp_str,sNodeData.u16Address,COORDINATOR_ADR);
			vUartPrint(PC_UARTPORT,tmp_str);
			genDUMPHT_R(tmp_str,sNodeData.u16Address,COORDINATOR_ADR);
			vUartPrint(PC_UARTPORT,tmp_str);
		}
		break;

	case E_AHI_DEVICE_TICK_TIMER:
		vTickTimerHandler();
		break;

	case PC_UARTEVENT:
		/* If data has been received */
		if ((u32ItemBitmap & 0x000000FF) == E_AHI_UART_INT_RXDATA)
		{
			/* Process UART0 RX interrupt */
			vUART_RxCharISR((u32ItemBitmap & 0x0000FF00) >> 8);
		}
		else if (u32ItemBitmap == E_AHI_UART_INT_TX)
		{
			/* Process UART0 TX interrupt */
			vUART_TxCharISR();
		}

		/*do {
			u8InterruptStatus = u8AHI_UartReadInterruptStatus(PC_UARTPORT);
				vByteToHEX(u8InterruptStatus,achar);
				vUartPrint(PC_UARTPORT,"CH:");
				vUartPrint(PC_UARTPORT,achar);
			if ( ((u8InterruptStatus & 0x0E) >> 1) == E_AHI_UART_INT_RXDATA )
			{
				u8RcvChar = u8AHI_UartReadData(PC_UARTPORT);

				if(u8RcvChar == '\0' || u8RcvChar == '\n') {
					cmdbuffer[cmdbuffer_index++] = '\r';
					cmdbuffer[cmdbuffer_index++] = '\n';
					cmdbuffer[cmdbuffer_index] = '\0';
					if(cmdbuffer[0] != '\0' && cmdbuffer[0] != '\r' && cmdbuffer[0] != '\n') {
						vUartPrint(PC_UARTPORT,"PC:");
						vUartPrint(PC_UARTPORT,cmdbuffer);
						vProcessor(cmdbuffer);
					}
					for(cmdbuffer_index=0;cmdbuffer_index<100;cmdbuffer_index++)
						cmdbuffer[cmdbuffer_index] = '\0';
					cmdbuffer_index = 0;

				} else if(u8RcvChar != '\r') {
					cmdbuffer[cmdbuffer_index] = u8RcvChar;
					cmdbuffer_index++;
					if(cmdbuffer_index >= 100)
						cmdbuffer_index -= 100;
				}
			}
		} while( (u8InterruptStatus & 0x01) == 0);*/
		break;

	default:
		break;
	}

}
PRIVATE void vProcessIncomingMlme(MAC_MlmeDcfmInd_s *psMlmeInd)
{
	/* We respond to several MLME indications and confirmations, depending on mode */
	switch (psMlmeInd->u8Type)
	{
	case MAC_MLME_DCFM_SCAN: /* Incoming scan results */
		if (psMlmeInd->uParam.sDcfmScan.u8ScanType == MAC_MLME_SCAN_TYPE_ENERGY_DETECT)
		{
			if (sNodeData.eState == E_STATE_ENERGY_SCANNING)
				vHandleEnergyScanResponse(psMlmeInd);
		}
		if (sNodeData.eState == E_STATE_ACTIVE_SCANNING)
				vHandleActiveScanResponse(psMlmeInd);
		break;

	case MAC_MLME_IND_ASSOCIATE: /* Incoming association request */
		if (sNodeData.eState == E_STATE_COORDINATOR)
			vHandleNodeAssociation(psMlmeInd);
		break;

	case MAC_MLME_DCFM_ASSOCIATE:/* Deferred confirmation that the association process is complete */
		/* Only respond to this if associating */
		if (sNodeData.eState == E_STATE_ASSOCIATING)
			vHandleAssociateResponse(psMlmeInd);
		break;

	default:
		break;
	}
}
PRIVATE void vProcessIncomingMcps(MAC_McpsDcfmInd_s *psMcpsInd)
{
	if (sNodeData.eState >= E_STATE_COORDINATOR || sNodeData.eState >= E_STATE_ASSOCIATED)
	{
		switch(psMcpsInd->u8Type)
		{
		case MAC_MCPS_IND_DATA:  /* Incoming data frame */
			vHandleMcpsDataInd(psMcpsInd);
			break;
		case MAC_MCPS_DCFM_DATA: /* Incoming acknowledgement or ack timeout */
			vHandleMcpsDataDcfm(psMcpsInd);
			break;
		default:
			break;
		}
	}
}

// for 802.15.4 wireless connection
PRIVATE void vStartActiveScan(void)
{
	MAC_MlmeReqRsp_s  sMlmeReqRsp;
	MAC_MlmeSyncCfm_s sMlmeSyncCfm;

	sNodeData.eState = E_STATE_ACTIVE_SCANNING;

	/* Request scan */
	sMlmeReqRsp.u8Type = MAC_MLME_REQ_SCAN;
	sMlmeReqRsp.u8ParamLength = sizeof(MAC_MlmeReqScan_s);
	sMlmeReqRsp.uParam.sReqScan.u8ScanType = MAC_MLME_SCAN_TYPE_ACTIVE;
	sMlmeReqRsp.uParam.sReqScan.u32ScanChannels = SCAN_CHANNELS;
	sMlmeReqRsp.uParam.sReqScan.u8ScanDuration = ACTIVE_SCAN_DURATION;

	vAppApiMlmeRequest(&sMlmeReqRsp, &sMlmeSyncCfm);
}
PRIVATE void vStartEnergyScan(void)
{
	MAC_vPibSetShortAddr(s_pvMac, sNodeData.u16Address);

	/* Structures used to hold data for MLME request and response */
	MAC_MlmeReqRsp_s  sMlmeReqRsp;
	MAC_MlmeSyncCfm_s sMlmeSyncCfm;

	sNodeData.eState = E_STATE_ENERGY_SCANNING;

	/* Start energy detect scan */
	sMlmeReqRsp.u8Type = MAC_MLME_REQ_SCAN;
	sMlmeReqRsp.u8ParamLength = sizeof(MAC_MlmeReqStart_s);
	sMlmeReqRsp.uParam.sReqScan.u8ScanType = MAC_MLME_SCAN_TYPE_ENERGY_DETECT;
	sMlmeReqRsp.uParam.sReqScan.u32ScanChannels = SCAN_CHANNELS;
	sMlmeReqRsp.uParam.sReqScan.u8ScanDuration = ENERGY_SCAN_DURATION;

	vAppApiMlmeRequest(&sMlmeReqRsp, &sMlmeSyncCfm);
}
PRIVATE void vStartCoordinator(void)
{
	/* Structures used to hold data for MLME request and response */
	MAC_MlmeReqRsp_s  sMlmeReqRsp;
	MAC_MlmeSyncCfm_s sMlmeSyncCfm;

	sNodeData.eState = E_STATE_COORDINATOR;

	/* Start Pan */
	sMlmeReqRsp.u8Type = MAC_MLME_REQ_START;
	sMlmeReqRsp.u8ParamLength = sizeof(MAC_MlmeReqStart_s);
	sMlmeReqRsp.uParam.sReqStart.u16PanId = PAN_ID;
	sMlmeReqRsp.uParam.sReqStart.u8Channel = sNodeData.u8Channel;
	sMlmeReqRsp.uParam.sReqStart.u8BeaconOrder = 0x0F;
	sMlmeReqRsp.uParam.sReqStart.u8SuperframeOrder = 0x0F;
	sMlmeReqRsp.uParam.sReqStart.u8PanCoordinator = TRUE;
	sMlmeReqRsp.uParam.sReqStart.u8BatteryLifeExt = FALSE;
	sMlmeReqRsp.uParam.sReqStart.u8Realignment = FALSE;
	sMlmeReqRsp.uParam.sReqStart.u8SecurityEnable = FALSE;

	vAppApiMlmeRequest(&sMlmeReqRsp, &sMlmeSyncCfm);

	led_off(LED1);
	vStartTickTimer();
}
PRIVATE void vStartTickTimer(void)
{
	u16HelloInt = HELLO_INTERVAL;
	u16DelayedChk = DELAYED_INTERVAL;

	vAHI_TickTimerConfigure(E_AHI_TICK_TIMER_RESTART);
	vAHI_TickTimerWrite(0);
	vAHI_TickTimerInterval(16000000);
	vAHI_TickTimerIntEnable(TRUE);

	vUartPrint(PC_UARTPORT,"MESSAGE:SystemReady\r\n");
}
PRIVATE void vStartAssociate(void)
{
	MAC_MlmeReqRsp_s  sMlmeReqRsp;
	MAC_MlmeSyncCfm_s sMlmeSyncCfm;

	sNodeData.eState = E_STATE_ASSOCIATING;

	/* Create associate request.*/
	/* We know short address and PAN ID of coordinator as this is preset and we have checked that received beacon matched this */

	sMlmeReqRsp.u8Type = MAC_MLME_REQ_ASSOCIATE;
	sMlmeReqRsp.u8ParamLength = sizeof(MAC_MlmeReqAssociate_s);
	sMlmeReqRsp.uParam.sReqAssociate.u8LogicalChan = sNodeData.u8Channel;
	sMlmeReqRsp.uParam.sReqAssociate.u8Capability = 0x80; /* We want short address, other features off */
	sMlmeReqRsp.uParam.sReqAssociate.u8SecurityEnable = FALSE;
	sMlmeReqRsp.uParam.sReqAssociate.sCoord.u8AddrMode = 2;
	sMlmeReqRsp.uParam.sReqAssociate.sCoord.u16PanId = PAN_ID;
	sMlmeReqRsp.uParam.sReqAssociate.sCoord.uAddr.u16Short = sNodeData.u16ParentAddress;

	/* Put in associate request and check immediate confirm. Should be deferred, in which case response is handled by event handler */
	vAppApiMlmeRequest(&sMlmeReqRsp, &sMlmeSyncCfm);
}
PRIVATE void vHandleActiveScanResponse(MAC_MlmeDcfmInd_s *psMlmeInd)
{
	MAC_PanDescr_s *psPanDesc;
	uint8 i;

	if (psMlmeInd->uParam.sDcfmScan.u8ScanType == MAC_MLME_SCAN_TYPE_ACTIVE)
	{
		if (psMlmeInd->uParam.sDcfmScan.u8Status == MAC_ENUM_SUCCESS)
		{
			i = 0;

			while (i < psMlmeInd->uParam.sDcfmScan.u8ResultListSize)
			{
				psPanDesc = &psMlmeInd->uParam.sDcfmScan.uList.asPanDescr[i];

				if ((psPanDesc->sCoord.u16PanId == PAN_ID) &&
					(psPanDesc->sCoord.u8AddrMode == 2) &&
					(psPanDesc->u16SuperframeSpec & 0x8000))
				{
					sNodeData.u8Channel = psPanDesc->u8LogicalChan;
					sNodeData.u16ParentAddress = psPanDesc->sCoord.uAddr.u16Short;
					vStartAssociate();
					return;
				}
				i++;
			}
		}
		vStartEnergyScan();
	}
}
PRIVATE void vHandleEnergyScanResponse(MAC_MlmeDcfmInd_s *psMlmeInd)
{
	uint8 i = 0;
	uint8 u8MinEnergy;

	u8MinEnergy = (psMlmeInd->uParam.sDcfmScan.uList.au8EnergyDetect[0]);

	sNodeData.u8Channel = CHANNEL_MIN;

	/* Search list to find quietest channel */
	while (i < psMlmeInd->uParam.sDcfmScan.u8ResultListSize)
	{
		if ((psMlmeInd->uParam.sDcfmScan.uList.au8EnergyDetect[i]) < u8MinEnergy)
		{
			u8MinEnergy = (psMlmeInd->uParam.sDcfmScan.uList.au8EnergyDetect[i]);
			sNodeData.u8Channel = i + CHANNEL_MIN;
		}
		i++;
	}
	vStartCoordinator();
}
PRIVATE void vHandleNodeAssociation(MAC_MlmeDcfmInd_s *psMlmeInd)
{
	uint16 u16ShortAdr = 0xffff;
	uint16 u16EndDeviceIndex;

	MAC_MlmeReqRsp_s   sMlmeReqRsp;
	MAC_MlmeSyncCfm_s  sMlmeSyncCfm;

	if (sNodeData.u16NbrChild < MAX_CHILD)
	{
		/* Store end device address data */
		u16EndDeviceIndex = sNodeData.u16NbrChild;
		u16ShortAdr = BROADCAST_ADR; //unused
		sNodeData.sChildData[u16EndDeviceIndex].u16ShortAdr = sNodeData.u16Address + u16EndDeviceIndex*CSKIP_ADDR + 1;
		sNodeData.sChildData[u16EndDeviceIndex].u32ExtAdrL  = psMlmeInd->uParam.sIndAssociate.sDeviceAddr.u32L;
		sNodeData.sChildData[u16EndDeviceIndex].u32ExtAdrH  = psMlmeInd->uParam.sIndAssociate.sDeviceAddr.u32H;
		sNodeData.u16NbrChild++;

		sMlmeReqRsp.uParam.sRspAssociate.u8Status = 0; /* Access granted */
	}
	else
		sMlmeReqRsp.uParam.sRspAssociate.u8Status = 2; /* Denied */

	/* Create association response */
	sMlmeReqRsp.u8Type = MAC_MLME_RSP_ASSOCIATE;
	sMlmeReqRsp.u8ParamLength = sizeof(MAC_MlmeRspAssociate_s);
	sMlmeReqRsp.uParam.sRspAssociate.sDeviceAddr.u32H = psMlmeInd->uParam.sIndAssociate.sDeviceAddr.u32H;
	sMlmeReqRsp.uParam.sRspAssociate.sDeviceAddr.u32L = psMlmeInd->uParam.sIndAssociate.sDeviceAddr.u32L;
	sMlmeReqRsp.uParam.sRspAssociate.u16AssocShortAddr = sNodeData.u16Address + u16EndDeviceIndex*CSKIP_ADDR + 1;

	sMlmeReqRsp.uParam.sRspAssociate.u8SecurityEnable = FALSE;

	/* Send association response. There is no confirmation for an association response, hence no need to check */
	vAppApiMlmeRequest(&sMlmeReqRsp, &sMlmeSyncCfm);
}
PRIVATE void vHandleAssociateResponse(MAC_MlmeDcfmInd_s *psMlmeInd)
{
	/* If successfully associated with network coordinator */
	if (psMlmeInd->uParam.sDcfmAssociate.u8Status == MAC_ENUM_SUCCESS)
	{
		sNodeData.u16Address = psMlmeInd->uParam.sDcfmAssociate.u16AssocShortAddr;
		MAC_vPibSetShortAddr(s_pvMac, sNodeData.u16Address);

		sNodeData.eState = E_STATE_ASSOCIATED;

		vStartCoordinator();
		led_off(LED0);
	}
	else
		vStartEnergyScan();

}
PRIVATE void vHandleMcpsDataDcfm(MAC_McpsDcfmInd_s *psMcpsInd)
{
	if (psMcpsInd->uParam.sDcfmData.u8Status == MAC_ENUM_SUCCESS)
	{
		/* Data frame transmission successful */
	}
	else
	{
		/* Data transmission falied after 3 retries at MAC layer. */
	}
}
PRIVATE void vHandleMcpsDataInd(MAC_McpsDcfmInd_s *psMcpsInd)
{
	MAC_RxFrameData_s *psFrame;

	psFrame = &psMcpsInd->uParam.sIndData.sFrame;

	/**change**/
    u8LastLQI = psFrame->u8LinkQuality;
    /**change**/

	if(psFrame->sDstAddr.uAddr.u16Short == sNodeData.u16Address) {
		/* Check application layer sequence number of frame and reject if it is the same as the last frame, i.e. same frame has been received more than once. */
		if (psFrame->au8Sdu[0] >= sNodeData.u8RxPacketSeqNb)
		{
			sNodeData.u8RxPacketSeqNb++;
			vProcessReceivedDataPacket(&psFrame->au8Sdu[1], (psFrame->u8SduLength) - 1);
		}
	} else if(psFrame->sDstAddr.uAddr.u16Short == BROADCAST_ADR) {
		if (psFrame->au8Sdu[0] >= sNodeData.u8RxPacketSeqNb)
		{
			sNodeData.u8RxPacketSeqNb++;
			/**change**/
			if(psFrame->sSrcAddr.uAddr.u16Short > sNodeData.u16Address)
                vProcessBroadcastDataPacket(&psFrame->au8Sdu[1], (psFrame->u8SduLength) - 1);
            /**change**/
		}
	}
}

// for PC uart data
PUBLIC void vUartPrint(uint8 u8UartPort, char *pcString)
{
	/*while (*pcString)
	{
		while ((u8AHI_UartReadLineStatus(u8UartPort) & E_AHI_UART_LS_THRE) == 0);

		vAHI_UartWriteData(u8UartPort, *pcString);
		pcString++;
	}*/
	vSerial_TxString((uint8*)pcString);
}

// for wireless data
PRIVATE void vProcessReceivedDataPacket(uint8 *pu8Data, uint8 u8Len)
{
	static char command_r[100];
	static int cur_cmdr = 0;

	/**change**/
	char tmp_str[10];
	v2ByteToDEC(u8LastLQI,tmp_str);
    vUartPrint(PC_UARTPORT,tmp_str);
    vUartPrint(PC_UARTPORT," ");
	/**change**/

	int i;
	for(i=0;i<u8Len;i++) {

		if(pu8Data[i]=='\n' || pu8Data[i]=='\0') {
			command_r[cur_cmdr] = '\n';
			command_r[cur_cmdr+1] = '\0';
			vUartPrint(PC_UARTPORT,"RX:");
			vUartPrint(PC_UARTPORT,command_r);
			vProcessor(command_r);
			cur_cmdr = 0;
			command_r[cur_cmdr] = '\0';
		} else {
			command_r[cur_cmdr] = pu8Data[i];
			cur_cmdr++;
		}
	}
}
PRIVATE void vProcessBroadcastDataPacket(uint8 *pu8Data, uint8 u8Len)
{
	static char command_b[100];
	static int cur_cmdb = 0;

	/**change**/
	char tmp_str[10];
	v2ByteToDEC(u8LastLQI,tmp_str);
    vUartPrint(PC_UARTPORT,tmp_str);
    vUartPrint(PC_UARTPORT," ");
	/**change**/

	int i;
	for(i=0;i<u8Len;i++) {

		if(pu8Data[i]=='\n' || pu8Data[i]=='\0') {
			command_b[cur_cmdb] = '\n';
			command_b[cur_cmdb+1] = '\0';
			vUartPrint(PC_UARTPORT,"RX:");
			vUartPrint(PC_UARTPORT,command_b);
			vProcessor(command_b);
			cur_cmdb = 0;
			command_b[cur_cmdb] = '\0';
		} else {
			command_b[cur_cmdb] = pu8Data[i];
			cur_cmdb++;
		}
	}
	/**change**/
	if(sNodeData.u16Address != 0x0001)
        vTransmitDataPacket(pu8Data, u8Len, BROADCAST_ADR);
	/**change**/
}
PRIVATE void vTransmitDataPacket(uint8 *pu8Data, uint8 u8Len, uint16 u16DestAdr)
{
    vUartPrint(PC_UARTPORT,"00000 ");
	vUartPrint(PC_UARTPORT,"TX:");
	vUartPrint(PC_UARTPORT,(char*)pu8Data);

	MAC_McpsReqRsp_s  sMcpsReqRsp;
	MAC_McpsSyncCfm_s sMcpsSyncCfm;
	uint8 *pu8Payload, i = 0;

	/* Create frame transmission request */
	sMcpsReqRsp.u8Type = MAC_MCPS_REQ_DATA;
	sMcpsReqRsp.u8ParamLength = sizeof(MAC_McpsReqData_s);
	/* Set handle so we can match confirmation to request */
	sMcpsReqRsp.uParam.sReqData.u8Handle = 1;
	/* Use short address for source */
	sMcpsReqRsp.uParam.sReqData.sFrame.sSrcAddr.u8AddrMode = 2;
	sMcpsReqRsp.uParam.sReqData.sFrame.sSrcAddr.u16PanId = PAN_ID;
	sMcpsReqRsp.uParam.sReqData.sFrame.sSrcAddr.uAddr.u16Short = sNodeData.u16Address;
	/* Use short address for destination */
	sMcpsReqRsp.uParam.sReqData.sFrame.sDstAddr.u8AddrMode = 2;
	sMcpsReqRsp.uParam.sReqData.sFrame.sDstAddr.u16PanId = PAN_ID;
	sMcpsReqRsp.uParam.sReqData.sFrame.sDstAddr.uAddr.u16Short = u16DestAdr;
	/* Frame requires ack but not security, indirect transmit or GTS */
	sMcpsReqRsp.uParam.sReqData.sFrame.u8TxOptions = MAC_TX_OPTION_ACK;

	pu8Payload = sMcpsReqRsp.uParam.sReqData.sFrame.au8Sdu;

	pu8Payload[0] = sNodeData.u8TxPacketSeqNb++;

	for (i = 1; i < (u8Len + 1); i++)
	{
		pu8Payload[i] = *pu8Data++;
	}

	/* Set frame length */
	sMcpsReqRsp.uParam.sReqData.sFrame.u8SduLength = i;

	/* Request transmit */
	vAppApiMcpsRequest(&sMcpsReqRsp, &sMcpsSyncCfm);
}

//routing member
PRIVATE uint16 findNextHop(uint16 dest) {
	uint16 NextHop ;
	char tmp_str[100];

	if( (NextHop = sNodeData.uNextHop[dest]) != BROADCAST_ADR) {
		return NextHop;
	} else {
		//Strat Route Discover
		genRREQ(tmp_str,sNodeData.u16Address,dest,sNodeData.u16Address,MAX_HOPCOUNT);
		vTransmitDataPacket((uint8*)tmp_str,strlen(tmp_str),BROADCAST_ADR);
		return BROADCAST_ADR;
	}

}
//delayed transmission
PRIVATE void appendDelayedData(uint16 src, uint16 dest, char* command, uint8 timeout){
	int i;

	if(src == 0 || dest == 0)
		return;

	for(i=0;i<100;i++)
	{
		if(sNodeData.sDelayedData[i].timeout <= 0) {
			sNodeData.sDelayedData[i].src = src;
			sNodeData.sDelayedData[i].dest = dest;
			strncpy(sNodeData.sDelayedData[i].command,command,100);
			sNodeData.sDelayedData[i].timeout = timeout;
			return;
		}
	}
}
PRIVATE void clrDelayedData(tsDelayedData* target){
	target->src = BROADCAST_ADR;
	target->dest = BROADCAST_ADR;
	target->command[0]='\0';
	target->timeout = 0;
}
//generate content
PRIVATE void vProcessor(char* command) {

	uint16 src,dest,nexthop,from,hopcount;
	char tmp_str[100];

	if(!command) return;

	if(strncmp(command,"NOWADDR",7) == 0) {
		genNOWADDR(tmp_str);
		vUartPrint(PC_UARTPORT,tmp_str);
	} else if(strncmp(command,"HELLO",5) == 0) {
		src = u16DECTo2Byte(&(command[6]));
		sNodeData.u8NbrSense[src] = TRUE;
	} else if(strncmp(command,"PACKET",6) == 0) {
		src = u16DECTo2Byte(&(command[7]));
		dest = u16DECTo2Byte(&(command[13]));

		if(dest == sNodeData.u16Address) {
			vUartPrint(PC_UARTPORT,command);
		} else {
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	} else if(strncmp(command,"RREQ",4) == 0) {
		src = u16DECTo2Byte(&(command[5]));
		dest = u16DECTo2Byte(&(command[11]));
		from = u16DECTo2Byte(&(command[17]));
		hopcount = u16DECTo2Byte(&(command[23]));

		sNodeData.uNextHop[src] = from;

		if(dest == sNodeData.u16Address || sNodeData.uNextHop[dest] != BROADCAST_ADR) {
			//distination or route found
			genRREP(tmp_str,dest,src,sNodeData.u16Address);
			vProcessor(tmp_str);
		} else if(hopcount-- > 0) {
			//route no found
			genRREQ(tmp_str,src,dest,sNodeData.u16Address,hopcount);
			vTransmitDataPacket((uint8*)tmp_str,strlen(tmp_str),BROADCAST_ADR);
		}
	} else if(strncmp(command,"RREP",4) == 0) {
		src = u16DECTo2Byte(&(command[5]));
		dest = u16DECTo2Byte(&(command[11]));
		from = u16DECTo2Byte(&(command[17]));

		sNodeData.uNextHop[src] = from;

		if(dest == sNodeData.u16Address) {
		} else {
			//not distination
			genRREP(tmp_str,src,dest,sNodeData.u16Address);
			nexthop = findNextHop(src);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)tmp_str,strlen(tmp_str),nexthop);
		}
	} else if(strncmp(command,"DUMPNBR",7) == 0) {
		src = u16DECTo2Byte(&(command[8]));
		dest = u16DECTo2Byte(&(command[14]));

		if(dest == sNodeData.u16Address) {
			//responsing
			genDUMPNBR_R(tmp_str,dest,src);
			vProcessor(tmp_str);
		} else {
			//forwarding
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	} else if(strncmp(command,"DUMPNBR_R",9) == 0) {
		src = u16DECTo2Byte(&(command[10]));
		dest = u16DECTo2Byte(&(command[16]));

		if(dest == sNodeData.u16Address) {
			vUartPrint(PC_UARTPORT,command);
		} else {
			//forwarding
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	} else if(strncmp(command,"DUMPROUTE",9) == 0) {
		src = u16DECTo2Byte(&(command[10]));
		dest = u16DECTo2Byte(&(command[16]));

		if(dest == sNodeData.u16Address) {
			//responsing
			genDUMPROUTE_R(tmp_str,dest,src);
			vProcessor(tmp_str);
		} else {
			//forwarding
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	} else if(strncmp(command,"DUMPROUTE_R",11) == 0) {
		src = u16DECTo2Byte(&(command[12]));
		dest = u16DECTo2Byte(&(command[18]));

		if(dest == sNodeData.u16Address) {
			vUartPrint(PC_UARTPORT,command);
		} else {
			//forwarding
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	} else if(strncmp(command,"DUMPHT",6) == 0) {
		src = u16DECTo2Byte(&(command[7]));
		dest = u16DECTo2Byte(&(command[13]));

		if(dest == sNodeData.u16Address) {
			//responsing
			genDUMPHT_R(tmp_str,dest,src);
			vProcessor(tmp_str);
		} else {
			//forwarding
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	} else if(strncmp(command,"DUMPHT_R",8) == 0) {
		vUartPrint(PC_UARTPORT,"MESSAGE:get DUMPHT_R\r\n");
		src = u16DECTo2Byte(&(command[9]));
		dest = u16DECTo2Byte(&(command[15]));

		if(dest == sNodeData.u16Address) {
			vUartPrint(PC_UARTPORT,command);
		} else {
			//forwarding
			nexthop = findNextHop(dest);
			if(nexthop != BROADCAST_ADR)
				vTransmitDataPacket((uint8*)command,strlen(command),nexthop);
			else appendDelayedData(src,dest,command,DELAYED_TIMEOUT);
		}
	}

}
PRIVATE void vTickTimerHandler(void){
	int i;
	char tmp_str[100];
	uint16 nexthop;

	//led_toggle(LED0);

	if(u16HelloInt-- == 0) {
		u16HelloInt = HELLO_INTERVAL;
		// Hello message
		if(sNodeData.u16Address > 1)
		{
            genHELLO(tmp_str,sNodeData.u16Address);
            vTransmitDataPacket((uint8*)tmp_str, strlen(tmp_str), BROADCAST_ADR);
		}
		//return;
	}

	vSerialRxString((uint8*)tmp_str);
	if(strlen(tmp_str) != 0)
	{	vProcessor(tmp_str);
		//return;
	}

	if(u16DelayedChk-- == 0) {
		u16DelayedChk = DELAYED_INTERVAL;
		// Delayed check
		for(i=0;i<100;i++)
			if(sNodeData.sDelayedData[i].timeout > 0) {
				sNodeData.sDelayedData[i].timeout--;
				if(sNodeData.sDelayedData[i].timeout == 0) {
					nexthop = findNextHop(sNodeData.sDelayedData[i].dest);
					if(nexthop != BROADCAST_ADR)
						vTransmitDataPacket((uint8*)(sNodeData.sDelayedData[i].command),strlen(sNodeData.sDelayedData[i].command),nexthop);
					else {
						vUartPrint(PC_UARTPORT,"MESSAGE:Routing Failed\r\n");
						led_on(LED1);
					}
					clrDelayedData(&(sNodeData.sDelayedData[i]));
				}
			}
	}
}
PRIVATE char* dumpHTData(char* str)
{

	uint16 u16Temperature;
	uint16 u16Humidity;

	char tmp_str[6];
	str[0]='\0';

	// gather sensor data
//	wtd_ResetState();
	vHTSstartReadTemp();
	u16Temperature =  u16HTSreadTempResult();
	vHTSstartReadHumidity();
	u16Humidity =  u16HTSreadHumidityResult();

	strncat(str," ",1);
	v2ByteToDEC(u16Humidity,tmp_str);
	strncat(str,tmp_str,5);
	strncat(str," ",1);
	v2ByteToDEC(u16Temperature,tmp_str);
	strncat(str,tmp_str,5);
	strncat(str," ",1);

	return str;
}

PRIVATE char* dumpRouteData(char* str)
{
	int i;

	char tmp_str[6];
	str[0]='\0';

	strncat(str,"|",1);
	for(i=0;i<MAX_NODE;i++)
	{
		if(sNodeData.uNextHop[i] != BROADCAST_ADR)
		{
			//destination
			v2ByteToDEC(i,tmp_str);
			strncat(str,tmp_str,5);
			strncat(str,":",1);
			//next hop
			v2ByteToDEC(sNodeData.uNextHop[i],tmp_str);
			strncat(str,tmp_str,5);
			strncat(str,"|",1);
		}
	}

	return str;
}
PRIVATE char* dumpNbrData(char* str)
{
	int i;

	char tmp_str[6];
	str[0]='\0';

	strncat(str,"|",1);
	for(i=0;i<MAX_NODE;i++)
	{
		if(sNodeData.u8NbrSense[i])
		{
			v2ByteToDEC(i,tmp_str);
			strncat(str,tmp_str,5);
			strncat(str,"|",1);
		}
	}

	return str;
}
PRIVATE char* genNOWADDR(char* str)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"NOWADDR ",strlen("NOWADDR "));
	//myaddr
	v2ByteToDEC(sNodeData.u16Address,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//parentaddr
	v2ByteToDEC(sNodeData.u16ParentAddress,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genPACKET(char* str,uint16 src,uint16 dest,char* payload)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"PACKET ",strlen("PACKET "));
	//src
	v2ByteToDEC(src,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//dest
	v2ByteToDEC(dest,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//payload
	char* s = payload;
	char* d = &(str[strlen(str)]);

	for (; (*d = *s); ++s, ++d) {
		if(*d == ' ')
			*d = '_';
		if(*d == '\r') {
			*d = '\\';
			*(++d) = 'r';
		}
		if(*d == '\n') {
			*d = '\\';
			*(++d) = 'n';
		}
	}
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genHELLO(char* str,uint16 src)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"HELLO ",strlen("HELLO "));
	//src
	v2ByteToDEC(sNodeData.u16Address,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",1);

	dumpHTData(tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
/*
	v2ByteToDEC(u16Temperature,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",1);

	v2ByteToDEC(u16Humidity,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
*/

	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genRREQ(char* str,uint16 src,uint16 dest,uint16 from,uint16 hopcount)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"RREQ ",strlen("RREQ "));
	//src
	v2ByteToDEC(src,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//dest
	v2ByteToDEC(dest,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//from
	v2ByteToDEC(from,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//hop count
	v2ByteToDEC(hopcount,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genRREP(char* str,uint16 src,uint16 dest,uint16 from)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"RREP ",strlen("RREP "));
	//src
	v2ByteToDEC(src,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//dest
	v2ByteToDEC(dest,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//from
	v2ByteToDEC(from,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genDUMPNBR_R(char* str,uint16 src,uint16 dest)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"DUMPNBR_R ",strlen("DUMPNBR_R "));
	//src
	v2ByteToDEC(src,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//dest
	v2ByteToDEC(dest,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//neighbor data
	dumpNbrData(tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genDUMPROUTE_R(char* str,uint16 src,uint16 dest)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"DUMPROUTE_R ",strlen("DUMPROUTE_R "));
	//src
	v2ByteToDEC(src,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//dest
	v2ByteToDEC(dest,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//routing data
	dumpRouteData(tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
PRIVATE char* genDUMPHT_R(char* str,uint16 src,uint16 dest)
{
	char tmp_str[100];
	str[0]='\0';

	strncat(str,"DUMPHT_R ",strlen("DUMPHT_R "));
	//src
	v2ByteToDEC(src,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//dest
	v2ByteToDEC(dest,tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str," ",strlen(" "));
	//ht data
	dumpHTData(tmp_str);
	strncat(str,tmp_str,strlen(tmp_str));
	strncat(str,"\r\n",strlen("\r\n"));

	return str;
}
